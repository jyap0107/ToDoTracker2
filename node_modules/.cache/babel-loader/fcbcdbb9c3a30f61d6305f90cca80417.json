{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\johnn\\\\cse316hw2\\\\todo_tracker_hw2\\\\src\\\\App.js\";\n// IMPORT ALL THE THINGS NEEDED FROM OTHER JAVASCRIPT SOURCE FILES\nimport React, { Component } from 'react';\nimport testData from './test/testData.json';\nimport jsTPS from './common/jsTPS'; // THESE ARE OUR REACT COMPONENTS\n\nimport Navbar from './components/Navbar';\nimport LeftSidebar from './components/LeftSidebar';\nimport Workspace from './components/Workspace';\nimport DeleteListConfirmation from './components/DeleteListConfirmation';\nimport AddNewItem_Transaction from './transactions/AddNewItem_Transaction';\nimport DeleteItem_Transaction from './transactions/DeleteItem_Transaction';\nimport DescriptionChange_Transaction from './transactions/DescriptionChange_Transaction';\nimport DueDateChange_Transaction from './transactions/DueDateChange_Transaction';\nimport StatusChange_Transaction from './transactions/StatusChange_Transaction';\nimport MoveItemUp_Transaction from './transactions/MoveItemUp_Transaction';\nimport MoveItemDown_Transaction from './transactions/MoveItemDown_Transaction';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n{\n  /*import ItemsListHeaderComponent from './components/ItemsListHeaderComponent'\r\n  import ItemsListComponent from './components/ItemsListComponent'\r\n  import ListsComponent from './components/ListsComponent'\r\n  */\n}\n\nclass App extends Component {\n  constructor(props) {\n    // ALWAYS DO THIS FIRST\n    super(props); // DISPLAY WHERE WE ARE\n\n    this.loadToDoList = toDoList => {\n      console.log(\"loading \" + toDoList); // MAKE SURE toDoList IS AT THE TOP OF THE STACK BY REMOVING THEN PREPENDING\n\n      const nextLists = this.state.toDoLists.filter(testList => testList.id !== toDoList.id);\n      nextLists.unshift(toDoList);\n      this.setState({\n        toDoLists: nextLists,\n        currentList: toDoList,\n        clickedOn: \"otherList\",\n        hasUndo: false,\n        hasRedo: false\n      });\n      this.tps.clearAllTransactions();\n    };\n\n    this.addNewList = () => {\n      let newToDoListInList = [this.makeNewToDoList()];\n      let newToDoListsList = [...newToDoListInList, ...this.state.toDoLists];\n      let newToDoList = newToDoListInList[0]; // AND SET THE STATE, WHICH SHOULD FORCE A render\n\n      this.setState({\n        toDoLists: newToDoListsList,\n        currentList: newToDoList,\n        nextListId: this.state.nextListId + 1\n      }, this.afterToDoListsChangeComplete);\n    };\n\n    this.makeNewToDoList = () => {\n      let newToDoList = {\n        id: this.state.nextListId,\n        name: 'Untitled',\n        items: []\n      };\n      return newToDoList;\n    };\n\n    this.addNewItemToList = () => {\n      let newItem = this.makeNewToDoListItem();\n      this.state.currentList.items.push(newItem);\n      let id = this.state.nextListItemId;\n      console.log(this.tps.hasTransactionToRedo());\n      this.setState({\n        currentList: this.state.currentList,\n        nextListItemId: this.state.nextListItemId + 1\n      });\n      return id;\n    };\n\n    this.addItemAtIndex = (item, index) => {\n      this.state.currentList.items.splice(index, 0, item);\n      this.setState({\n        currentList: this.state.currentList\n      });\n    };\n\n    this.addCustomItemToList = (desc, due, stat, givenId) => {\n      let newItem = {\n        description: desc,\n        dueDate: due,\n        status: stat,\n        id: givenId\n      };\n      this.state.currentList.items.push(newItem);\n      let id = this.state.nextListItemId;\n      this.setState({\n        currentList: this.state.currentList,\n        nextListItemId: this.state.nextListItemId + 1\n      });\n      return id;\n    };\n\n    this.deleteCurrentList = () => {\n      this.state.toDoLists.splice(0, 1);\n      this.setState({\n        toDoLists: this.state.toDoLists,\n        currentList: {\n          items: []\n        },\n        showModal: !this.state.showModal\n      });\n    };\n\n    this.moveItemUp = id => {\n      for (let i = 1; i < this.state.currentList.items.length; i++) {\n        if (id == this.state.currentList.items[i].id) {\n          let temp = this.state.currentList.items[i];\n          this.state.currentList.items[i] = this.state.currentList.items[i - 1];\n          this.state.currentList.items[i - 1] = temp;\n          break;\n        }\n      }\n\n      this.setState({\n        currentList: this.state.currentList\n      });\n    };\n\n    this.moveItemDown = id => {\n      for (let i = this.state.currentList.items.length - 2; i >= 0; i--) {\n        if (id == this.state.currentList.items[i].id) {\n          let temp = this.state.currentList.items[i];\n          this.state.currentList.items[i] = this.state.currentList.items[i + 1];\n          this.state.currentList.items[i + 1] = temp;\n          break;\n        }\n      }\n\n      this.setState({\n        currentList: this.state.currentList\n      });\n    };\n\n    this.deleteItem = id => {\n      let item;\n      let position = 0;\n\n      for (let i = 0; i < this.state.currentList.items.length; i++) {\n        if (this.state.currentList.items[i].id == id) {\n          item = this.state.currentList.items[i];\n          position = i;\n          this.state.currentList.items.splice(i, 1);\n          break;\n        }\n      }\n\n      this.setState({\n        currentList: this.state.currentList\n      });\n      return [item, position];\n    };\n\n    this.swapToInput = (id, clickName) => {\n      this.setState({\n        clickedOn: clickName,\n        clickedId: id\n      });\n    };\n\n    this.swapToDiv = (id, value, clickName) => {\n      if (clickName == \"description\") {\n        this.descriptionChangeTransaction(value, id);\n      }\n\n      if (clickName == \"dueDate\") {\n        this.dueDateChangeTransaction(value, id);\n      }\n\n      if (clickName == \"status\") {\n        this.statusChangeTransaction(value, id);\n      }\n\n      if (clickName == \"firstList\") {\n        this.handleListNameChange(value, id);\n      }\n    };\n\n    this.swapToStatus = (id, clickName) => {\n      this.setState({\n        clickedOn: clickName,\n        clickedId: id\n      });\n    };\n\n    this.handleDescriptionChange = (value, id) => {\n      this.state.currentList.items.map(item => item.id == id ? item.description = value : item.description = item.description);\n      this.setState({\n        currentList: this.state.currentList,\n        clickedOn: \"\",\n        clickedId: \"\"\n      });\n    };\n\n    this.handleDueDateChange = (value, id) => {\n      this.state.currentList.items.map(item => item.id == id ? item.due_date = value : item.due_date = item.due_date);\n      this.setState({\n        currentList: this.state.currentList,\n        clickedOn: \"\",\n        clickedId: \"\"\n      });\n    };\n\n    this.handleStatusChange = (value, id) => {\n      this.state.currentList.items.map(item => item.id == id ? item.status = value : item.status = item.status);\n      this.setState({\n        currentList: this.state.currentList,\n        clickedOn: \"\",\n        clickedId: \"\"\n      }, this.afterToDoListsChangeComplete);\n    };\n\n    this.afterToDoListsChangeComplete = () => {\n      console.log(\"App updated currentToDoList: \" + this.state.currentList); // WILL THIS WORK? @todo\n\n      let toDoListsString = JSON.stringify(this.state.toDoLists);\n      localStorage.setItem(\"recentLists\", toDoListsString);\n    };\n\n    this.toggleDeleteListConfirmation = () => {\n      if (this.state.currentList.id != null) {\n        this.setState({\n          showModal: !this.state.showModal\n        });\n      }\n    };\n\n    this.closeList = () => {\n      this.setState({\n        currentList: {\n          items: []\n        }\n      });\n    };\n\n    this.handleListNameChange = (value, id) => {\n      this.state.toDoLists.map(list => list.id == id ? list.name = value : list.name = list.name);\n      this.setState({\n        toDoLists: this.state.toDoLists,\n        clickedOn: \"\",\n        clickedId: \"\"\n      });\n    };\n\n    this.getItemAttribute = (id, attribute) => {\n      let items = this.state.currentList.items;\n\n      for (let i = 0; i < items.length; i++) {\n        if (items[i].id == id) {\n          if (attribute == \"description\") {\n            return items[i].description;\n          }\n\n          if (attribute == \"dueDate\") {\n            return items[i].due_date;\n          }\n\n          if (attribute == \"status\") {\n            return items[i].status;\n          }\n\n          break;\n        }\n      }\n\n      return;\n    };\n\n    this.undo = () => {\n      this.tps.undoTransaction(); // Can set state elsewhere and add or subtract from return value from hasUndo/redo\n\n      this.setState({\n        hasUndo: this.tps.hasTransactionToUndo(),\n        hasRedo: this.tps.hasTransactionToRedo()\n      });\n    };\n\n    this.redo = () => {\n      this.tps.doTransaction();\n      this.setState({\n        hasUndo: this.tps.hasTransactionToUndo(),\n        hasRedo: this.tps.hasTransactionToRedo()\n      });\n    };\n\n    this.addNewItemTransaction = () => {\n      let transaction = new AddNewItem_Transaction(this);\n      this.tps.addTransaction(transaction);\n      this.setState({\n        hasUndo: this.tps.hasTransactionToUndo(),\n        hasRedo: this.tps.hasTransactionToRedo()\n      });\n    };\n\n    this.deleteItemTransaction = id => {\n      let transaction = new DeleteItem_Transaction(this, id);\n      this.tps.addTransaction(transaction);\n      this.setState({\n        hasUndo: this.tps.hasTransactionToUndo(),\n        hasRedo: this.tps.hasTransactionToRedo()\n      });\n    };\n\n    this.descriptionChangeTransaction = (value, id) => {\n      if (value == this.getItemAttribute(id, \"description\")) {\n        this.setState({\n          clickedOn: \"\",\n          clickedId: \"\"\n        });\n        return;\n      }\n\n      let transaction = new DescriptionChange_Transaction(this, value, id);\n      this.tps.addTransaction(transaction);\n      this.setState({\n        hasUndo: this.tps.hasTransactionToUndo(),\n        hasRedo: this.tps.hasTransactionToRedo()\n      });\n    };\n\n    this.dueDateChangeTransaction = (value, id) => {\n      if (value == this.getItemAttribute(id, \"dueDate\") || value == \"\") {\n        this.setState({\n          clickedOn: \"\",\n          clickedId: \"\"\n        });\n        return;\n      }\n\n      let transaction = new DueDateChange_Transaction(this, value, id);\n      this.tps.addTransaction(transaction);\n      this.setState({\n        hasUndo: this.tps.hasTransactionToUndo(),\n        hasRedo: this.tps.hasTransactionToRedo()\n      });\n    };\n\n    this.statusChangeTransaction = (value, id) => {\n      if (value == this.getItemAttribute(id, \"status\")) {\n        this.setState({\n          clickedOn: \"\",\n          clickedId: \"\"\n        });\n        return;\n      }\n\n      let transaction = new StatusChange_Transaction(this, value, id);\n      this.tps.addTransaction(transaction);\n      this.setState({\n        hasUndo: this.tps.hasTransactionToUndo(),\n        hasRedo: this.tps.hasTransactionToRedo()\n      });\n    };\n\n    this.moveItemUpTransaction = id => {\n      let transaction = new MoveItemUp_Transaction(this, id);\n      this.tps.addTransaction(transaction);\n      this.setState({\n        hasUndo: this.tps.hasTransactionToUndo(),\n        hasRedo: this.tps.hasTransactionToRedo()\n      });\n    };\n\n    this.moveItemDownTransaction = id => {\n      let transaction = new MoveItemDown_Transaction(this, id);\n      this.tps.addTransaction(transaction);\n      this.setState({\n        hasUndo: this.tps.hasTransactionToUndo(),\n        hasRedo: this.tps.hasTransactionToRedo()\n      });\n    };\n\n    this.handleKeyPress = event => {\n      if (event.ctrlKey && event.key == \"z\") {\n        this.undo();\n      }\n\n      if (event.ctrlKey && event.key == \"y\") {\n        this.redo();\n      }\n    };\n\n    console.log(\"App constructor\"); // MAKE OUR TRANSACTION PROCESSING SYSTEM\n\n    this.tps = new jsTPS(); // CHECK TO SEE IF THERE IS DATA IN LOCAL STORAGE FOR THIS APP\n\n    let recentLists = localStorage.getItem(\"recentLists\");\n    console.log(\"recentLists: \" + recentLists);\n\n    if (!recentLists) {\n      recentLists = JSON.stringify(testData.toDoLists);\n      localStorage.setItem(\"recentLists\", recentLists);\n    }\n\n    recentLists = JSON.parse(recentLists); // FIND OUT WHAT THE HIGHEST ID NUMBERS ARE FOR LISTS\n\n    let highListId = -1;\n    let highListItemId = -1;\n\n    for (let i = 0; i < recentLists.length; i++) {\n      let toDoList = recentLists[i];\n\n      if (toDoList.id > highListId) {\n        highListId = toDoList.id;\n      }\n\n      for (let j = 0; j < toDoList.items.length; j++) {\n        let toDoListItem = toDoList.items[j];\n        if (toDoListItem.id > highListItemId) highListItemId = toDoListItem.id;\n      }\n    }\n\n    ; // SETUP OUR APP STATE\n\n    this.state = {\n      toDoLists: recentLists,\n      currentList: {\n        items: []\n      },\n      nextListId: highListId + 1,\n      nextListItemId: highListItemId + 1,\n      useVerboseFeedback: true,\n      showModal: false,\n      clickedOn: \"\",\n      clickedId: -1,\n      hasUndo: false,\n      hasRedo: false\n    };\n  } // componentDidUpdate(prevProps, prevState) {\n  //   console.log(prevState.currentList.items[0]);\n  // }\n  // WILL LOAD THE SELECTED LIST\n\n\n  makeNewToDoListItem() {\n    let newToDoListItem = {\n      description: \"No Description\",\n      due_date: \"No Date\",\n      status: \"incomplete\",\n      id: this.state.nextListItemId\n    };\n    return newToDoListItem;\n  }\n\n  render() {\n    let items = this.state.currentList.items;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"root\",\n      tabIndex: \"0\",\n      onKeyDown: this.handleKeyPress,\n      children: [/*#__PURE__*/_jsxDEV(DeleteListConfirmation, {\n        showModal: this.state.showModal,\n        closeModal: this.state.showModal,\n        deleteCurrentList: this.deleteCurrentList,\n        toggleDeleteListConfirmation: this.toggleDeleteListConfirmation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LeftSidebar, {\n        toDoLists: this.state.toDoLists,\n        loadToDoListCallback: this.loadToDoList,\n        addNewListCallback: this.addNewList,\n        currentList: this.state.currentList,\n        swapToInput: this.swapToInput,\n        swapToDiv: this.swapToDiv,\n        clickedOn: this.state.clickedOn,\n        clickedId: this.state.clickedId,\n        handleListNameChange: this.handleListNameChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Workspace, {\n        toDoListItems: items,\n        toggleDeleteListConfirmation: this.toggleDeleteListConfirmation,\n        currentListActive: this.state.currentList.id != null,\n        swapToInput: this.swapToInput,\n        swapToDiv: this.swapToDiv,\n        swapToStatus: this.swapToStatus,\n        clickedOn: this.state.clickedOn,\n        clickedId: this.state.clickedId,\n        addNewItemToList: this.addNewItemTransaction,\n        moveItemUp: this.moveItemUpTransaction,\n        moveItemDown: this.moveItemDownTransaction,\n        deleteItem: this.deleteItemTransaction,\n        closeList: this.closeList,\n        undo: this.undo,\n        redo: this.redo,\n        hasUndo: this.state.hasUndo,\n        hasRedo: this.state.hasRedo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/johnn/cse316hw2/todo_tracker_hw2/src/App.js"],"names":["React","Component","testData","jsTPS","Navbar","LeftSidebar","Workspace","DeleteListConfirmation","AddNewItem_Transaction","DeleteItem_Transaction","DescriptionChange_Transaction","DueDateChange_Transaction","StatusChange_Transaction","MoveItemUp_Transaction","MoveItemDown_Transaction","App","constructor","props","loadToDoList","toDoList","console","log","nextLists","state","toDoLists","filter","testList","id","unshift","setState","currentList","clickedOn","hasUndo","hasRedo","tps","clearAllTransactions","addNewList","newToDoListInList","makeNewToDoList","newToDoListsList","newToDoList","nextListId","afterToDoListsChangeComplete","name","items","addNewItemToList","newItem","makeNewToDoListItem","push","nextListItemId","hasTransactionToRedo","addItemAtIndex","item","index","splice","addCustomItemToList","desc","due","stat","givenId","description","dueDate","status","deleteCurrentList","showModal","moveItemUp","i","length","temp","moveItemDown","deleteItem","position","swapToInput","clickName","clickedId","swapToDiv","value","descriptionChangeTransaction","dueDateChangeTransaction","statusChangeTransaction","handleListNameChange","swapToStatus","handleDescriptionChange","map","handleDueDateChange","due_date","handleStatusChange","toDoListsString","JSON","stringify","localStorage","setItem","toggleDeleteListConfirmation","closeList","list","getItemAttribute","attribute","undo","undoTransaction","hasTransactionToUndo","redo","doTransaction","addNewItemTransaction","transaction","addTransaction","deleteItemTransaction","moveItemUpTransaction","moveItemDownTransaction","handleKeyPress","event","ctrlKey","key","recentLists","getItem","parse","highListId","highListItemId","j","toDoListItem","useVerboseFeedback","newToDoListItem","render"],"mappings":"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","sourcesContent":["// IMPORT ALL THE THINGS NEEDED FROM OTHER JAVASCRIPT SOURCE FILES\r\nimport React, { Component } from 'react';\r\nimport testData from './test/testData.json'\r\nimport jsTPS from './common/jsTPS'\r\n\r\n// THESE ARE OUR REACT COMPONENTS\r\nimport Navbar from './components/Navbar'\r\nimport LeftSidebar from './components/LeftSidebar'\r\nimport Workspace from './components/Workspace'\r\nimport DeleteListConfirmation from './components/DeleteListConfirmation'\r\nimport AddNewItem_Transaction from './transactions/AddNewItem_Transaction'\r\nimport DeleteItem_Transaction from './transactions/DeleteItem_Transaction'\r\nimport DescriptionChange_Transaction from './transactions/DescriptionChange_Transaction'\r\nimport DueDateChange_Transaction from './transactions/DueDateChange_Transaction'\r\nimport StatusChange_Transaction from './transactions/StatusChange_Transaction'\r\nimport MoveItemUp_Transaction from './transactions/MoveItemUp_Transaction';\r\nimport MoveItemDown_Transaction from './transactions/MoveItemDown_Transaction'\r\n{/*import ItemsListHeaderComponent from './components/ItemsListHeaderComponent'\r\nimport ItemsListComponent from './components/ItemsListComponent'\r\nimport ListsComponent from './components/ListsComponent'\r\n*/}\r\nclass App extends Component {\r\n  constructor(props) {\r\n    // ALWAYS DO THIS FIRST\r\n    super(props);\r\n\r\n    // DISPLAY WHERE WE ARE\r\n    console.log(\"App constructor\");\r\n\r\n    // MAKE OUR TRANSACTION PROCESSING SYSTEM\r\n    this.tps = new jsTPS();\r\n\r\n    // CHECK TO SEE IF THERE IS DATA IN LOCAL STORAGE FOR THIS APP\r\n    let recentLists = localStorage.getItem(\"recentLists\");\r\n    console.log(\"recentLists: \" + recentLists);\r\n    if (!recentLists) {\r\n      recentLists = JSON.stringify(testData.toDoLists);\r\n      localStorage.setItem(\"recentLists\", recentLists);\r\n    }\r\n    recentLists = JSON.parse(recentLists);\r\n\r\n    // FIND OUT WHAT THE HIGHEST ID NUMBERS ARE FOR LISTS\r\n    let highListId = -1;\r\n    let highListItemId = -1;\r\n    for (let i = 0; i < recentLists.length; i++) {\r\n      let toDoList = recentLists[i];\r\n      if (toDoList.id > highListId) {\r\n        highListId = toDoList.id;\r\n      }\r\n      for (let j = 0; j < toDoList.items.length; j++) {\r\n        let toDoListItem = toDoList.items[j];\r\n        if (toDoListItem.id > highListItemId)\r\n        highListItemId = toDoListItem.id;\r\n      }\r\n    };\r\n\r\n    // SETUP OUR APP STATE\r\n    this.state = {\r\n      toDoLists: recentLists,\r\n      currentList: {items: []},\r\n      nextListId: highListId+1,\r\n      nextListItemId: highListItemId+1,\r\n      useVerboseFeedback: true,\r\n      showModal: false,\r\n      clickedOn: \"\",\r\n      clickedId: -1,\r\n      hasUndo: false,\r\n      hasRedo: false\r\n    }\r\n  }\r\n\r\n  // componentDidUpdate(prevProps, prevState) {\r\n  //   console.log(prevState.currentList.items[0]);\r\n  // }\r\n  // WILL LOAD THE SELECTED LIST\r\n  loadToDoList = (toDoList) => {\r\n    console.log(\"loading \" + toDoList);\r\n\r\n    // MAKE SURE toDoList IS AT THE TOP OF THE STACK BY REMOVING THEN PREPENDING\r\n    const nextLists = this.state.toDoLists.filter(testList =>\r\n      testList.id !== toDoList.id\r\n    );\r\n    nextLists.unshift(toDoList);\r\n\r\n    this.setState({\r\n      toDoLists: nextLists,\r\n      currentList: toDoList,\r\n      clickedOn: \"otherList\",\r\n      hasUndo: false,\r\n      hasRedo: false\r\n    });\r\n    this.tps.clearAllTransactions();\r\n  }\r\n  /*\r\n  Creates three variables:\r\n  newToDoListInList is a a list with a new toDoList inside it.\r\n  newToDoListsList concatenates the list of list to the front of the current toDoLists.\r\n  newToDoList is the first list, which is the new one, just for currentList\r\n  */\r\n  addNewList = () => {\r\n    let newToDoListInList = [this.makeNewToDoList()];\r\n    let newToDoListsList = [...newToDoListInList, ...this.state.toDoLists];\r\n    let newToDoList = newToDoListInList[0];\r\n\r\n    // AND SET THE STATE, WHICH SHOULD FORCE A render\r\n    this.setState({\r\n      toDoLists: newToDoListsList,\r\n      currentList: newToDoList,\r\n      nextListId: this.state.nextListId+1\r\n    }, this.afterToDoListsChangeComplete);\r\n  }\r\n\r\n  makeNewToDoList = () => {\r\n    let newToDoList = {\r\n      id: this.state.nextListId,\r\n      name: 'Untitled',\r\n      items: []\r\n    };\r\n    return newToDoList;\r\n  }\r\n\r\n  makeNewToDoListItem() {\r\n    let newToDoListItem = {\r\n      description: \"No Description\",\r\n      due_date: \"No Date\",\r\n      status: \"incomplete\",\r\n      id: this.state.nextListItemId\r\n    };\r\n    return newToDoListItem;\r\n  }\r\n  addNewItemToList = () => {\r\n    let newItem = this.makeNewToDoListItem();\r\n    this.state.currentList.items.push(newItem);\r\n    let id = this.state.nextListItemId;\r\n    console.log(this.tps.hasTransactionToRedo());\r\n    this.setState({\r\n      currentList: this.state.currentList,\r\n      nextListItemId: this.state.nextListItemId+1\r\n    })\r\n    return id;\r\n  }\r\n  addItemAtIndex = (item, index) => {\r\n    this.state.currentList.items.splice(index, 0, item);\r\n    this.setState({\r\n      currentList: this.state.currentList,\r\n    })\r\n  }\r\n  addCustomItemToList = (desc, due, stat, givenId) => {\r\n    let newItem = {\r\n      description: desc,\r\n      dueDate: due,\r\n      status: stat,\r\n      id: givenId\r\n    };\r\n    this.state.currentList.items.push(newItem);\r\n    let id = this.state.nextListItemId;\r\n    this.setState({\r\n      currentList: this.state.currentList,\r\n      nextListItemId: this.state.nextListItemId+1,\r\n    })\r\n    return id;\r\n  }\r\n  deleteCurrentList = () => {\r\n    this.state.toDoLists.splice(0, 1);\r\n    this.setState({\r\n      toDoLists: this.state.toDoLists,\r\n      currentList: {items: []},\r\n      showModal: !this.state.showModal\r\n    })\r\n  }\r\n  moveItemUp = (id) => {\r\n    for (let i = 1; i < this.state.currentList.items.length; i++) {\r\n      if (id == this.state.currentList.items[i].id) {\r\n        let temp = this.state.currentList.items[i]\r\n        this.state.currentList.items[i] = this.state.currentList.items[i-1];\r\n        this.state.currentList.items[i-1] = temp;\r\n        break;\r\n      }\r\n    }\r\n    this.setState({\r\n      currentList: this.state.currentList,\r\n    })\r\n  }\r\n  moveItemDown = (id) => {\r\n    for (let i = this.state.currentList.items.length-2; i >= 0; i--) {\r\n      if (id == this.state.currentList.items[i].id) {\r\n        let temp = this.state.currentList.items[i]\r\n        this.state.currentList.items[i] = this.state.currentList.items[i+1];\r\n        this.state.currentList.items[i+1] = temp;\r\n        break;\r\n      }\r\n    }\r\n    this.setState({\r\n      currentList: this.state.currentList,\r\n    })\r\n  }\r\n  deleteItem = (id) => {\r\n    let item;\r\n    let position = 0;\r\n    for (let i = 0; i < this.state.currentList.items.length; i++) {\r\n      if (this.state.currentList.items[i].id == id) {\r\n        item = this.state.currentList.items[i];\r\n        position = i;\r\n        this.state.currentList.items.splice(i, 1);\r\n        break;\r\n      }\r\n    }\r\n    this.setState({\r\n      currentList: this.state.currentList,\r\n    })\r\n    return [item, position];\r\n  }\r\n  swapToInput = (id, clickName) => {\r\n    this.setState({\r\n      clickedOn: clickName,\r\n      clickedId: id\r\n    })\r\n  }\r\n  swapToDiv = (id, value, clickName) => {\r\n    if (clickName == \"description\") {\r\n      this.descriptionChangeTransaction(value, id)\r\n    }\r\n    if (clickName == \"dueDate\") {\r\n      this.dueDateChangeTransaction(value, id);\r\n    }\r\n    if (clickName == \"status\") {\r\n      this.statusChangeTransaction(value, id);\r\n    }\r\n    if (clickName == \"firstList\") {\r\n      this.handleListNameChange(value, id);\r\n    }\r\n  }\r\n  swapToStatus = (id, clickName) => {\r\n    this.setState({\r\n      clickedOn: clickName,\r\n      clickedId: id\r\n    })\r\n  }\r\n  handleDescriptionChange = (value, id) => {\r\n    this.state.currentList.items.map((item) => ((item.id == id ? item.description = value : item.description = item.description)\r\n    ))\r\n    this.setState({\r\n      currentList: this.state.currentList,\r\n      clickedOn: \"\",\r\n      clickedId: \"\",\r\n    })\r\n  }\r\n  handleDueDateChange = (value, id) => {\r\n    this.state.currentList.items.map((item) => ((item.id == id ? item.due_date = value : item.due_date = item.due_date)\r\n    ))\r\n    this.setState({\r\n      currentList: this.state.currentList,\r\n      clickedOn: \"\",\r\n      clickedId: \"\",\r\n    })\r\n  }\r\n  handleStatusChange = (value, id) => {\r\n    this.state.currentList.items.map((item) => ((item.id == id ? item.status = value : item.status = item.status)\r\n    ))\r\n    this.setState({\r\n      currentList: this.state.currentList,\r\n      clickedOn: \"\",\r\n      clickedId: \"\",\r\n    }, this.afterToDoListsChangeComplete)\r\n  }\r\n\r\n  // THIS IS A CALLBACK FUNCTION FOR AFTER AN EDIT TO A LIST\r\n  afterToDoListsChangeComplete = () => {\r\n    console.log(\"App updated currentToDoList: \" + this.state.currentList);\r\n\r\n    // WILL THIS WORK? @todo\r\n    let toDoListsString = JSON.stringify(this.state.toDoLists);\r\n    localStorage.setItem(\"recentLists\", toDoListsString);\r\n  }\r\n  toggleDeleteListConfirmation = () => {\r\n    if (this.state.currentList.id != null) {\r\n      this.setState({\r\n        showModal: !this.state.showModal\r\n      })\r\n    }\r\n  }\r\n  closeList = () => {\r\n    this.setState({\r\n      currentList: {items: []}\r\n    })\r\n  }\r\n  handleListNameChange = (value, id) => {\r\n      this.state.toDoLists.map((list) => (list.id == id ? list.name = value : list.name = list.name));\r\n      this.setState({\r\n        toDoLists:this.state.toDoLists,\r\n        clickedOn: \"\",\r\n        clickedId:\"\"\r\n      })\r\n  }\r\n  getItemAttribute = (id, attribute) => {\r\n    let items = this.state.currentList.items;\r\n    for (let i = 0; i < items.length; i++) {\r\n      if (items[i].id == id) {\r\n        if (attribute == \"description\") {\r\n          return items[i].description;\r\n        }\r\n        if (attribute == \"dueDate\") {\r\n          return items[i].due_date;\r\n        }\r\n        if (attribute == \"status\") {\r\n          return items[i].status;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    return;\r\n  }\r\n  undo = () => {\r\n    this.tps.undoTransaction();\r\n    // Can set state elsewhere and add or subtract from return value from hasUndo/redo\r\n    this.setState({\r\n      hasUndo: this.tps.hasTransactionToUndo(),\r\n      hasRedo: this.tps.hasTransactionToRedo()\r\n    })\r\n  }\r\n  redo = () => {\r\n    this.tps.doTransaction();\r\n    this.setState({\r\n      hasUndo: this.tps.hasTransactionToUndo(),\r\n      hasRedo: this.tps.hasTransactionToRedo()\r\n    })\r\n  }\r\n  addNewItemTransaction = () => {\r\n    let transaction = new AddNewItem_Transaction(this);\r\n    this.tps.addTransaction(transaction);\r\n    this.setState({\r\n      hasUndo: this.tps.hasTransactionToUndo(),\r\n      hasRedo: this.tps.hasTransactionToRedo()\r\n    })\r\n  }\r\n  deleteItemTransaction = (id) => {\r\n    let transaction = new DeleteItem_Transaction(this, id);\r\n    this.tps.addTransaction(transaction);\r\n    this.setState({\r\n      hasUndo: this.tps.hasTransactionToUndo(),\r\n      hasRedo: this.tps.hasTransactionToRedo()\r\n    })\r\n  }\r\n  descriptionChangeTransaction = (value, id) => {\r\n    if (value == this.getItemAttribute(id, \"description\")) {\r\n      this.setState({\r\n        clickedOn: \"\",\r\n        clickedId: \"\",\r\n      })\r\n      return;\r\n    }\r\n    let transaction = new DescriptionChange_Transaction(this, value, id);\r\n    this.tps.addTransaction(transaction);\r\n    this.setState({\r\n      hasUndo: this.tps.hasTransactionToUndo(),\r\n      hasRedo: this.tps.hasTransactionToRedo()\r\n    })\r\n  }\r\n  dueDateChangeTransaction = (value, id) => {\r\n    if (value == this.getItemAttribute(id, \"dueDate\") || value == \"\") {\r\n      this.setState({\r\n        clickedOn: \"\",\r\n        clickedId: \"\",\r\n      })\r\n      return;\r\n    }\r\n    let transaction = new DueDateChange_Transaction(this, value, id);\r\n    this.tps.addTransaction(transaction);\r\n    this.setState({\r\n      hasUndo: this.tps.hasTransactionToUndo(),\r\n      hasRedo: this.tps.hasTransactionToRedo()\r\n    })\r\n  }\r\n  statusChangeTransaction = (value, id) => {\r\n    if (value == this.getItemAttribute(id, \"status\")) {\r\n      this.setState({\r\n        clickedOn: \"\",\r\n        clickedId: \"\",\r\n      })\r\n      return;\r\n    }\r\n    let transaction = new StatusChange_Transaction(this, value, id);\r\n    this.tps.addTransaction(transaction);\r\n    this.setState({\r\n      hasUndo: this.tps.hasTransactionToUndo(),\r\n      hasRedo: this.tps.hasTransactionToRedo()\r\n    })\r\n  }\r\n  moveItemUpTransaction = (id) => {\r\n    let transaction = new MoveItemUp_Transaction(this, id);\r\n    this.tps.addTransaction(transaction);\r\n    this.setState({\r\n      hasUndo: this.tps.hasTransactionToUndo(),\r\n      hasRedo: this.tps.hasTransactionToRedo()\r\n    })\r\n  }\r\n  moveItemDownTransaction = (id) => {\r\n    let transaction = new MoveItemDown_Transaction(this, id);\r\n    this.tps.addTransaction(transaction);\r\n    this.setState({\r\n      hasUndo: this.tps.hasTransactionToUndo(),\r\n      hasRedo: this.tps.hasTransactionToRedo()\r\n    })\r\n  }\r\n  handleKeyPress = (event) => {\r\n    if (event.ctrlKey && event.key == \"z\") {\r\n      this.undo();\r\n    }\r\n    if (event.ctrlKey && event.key == \"y\") {\r\n      this.redo();\r\n    }\r\n  }\r\n  render() {\r\n    let items = this.state.currentList.items;\r\n    return (\r\n      <div id=\"root\"\r\n      tabIndex='0'\r\n      onKeyDown={this.handleKeyPress}>\r\n        <DeleteListConfirmation\r\n          showModal={this.state.showModal}\r\n          closeModal={this.state.showModal}\r\n          deleteCurrentList={this.deleteCurrentList}\r\n          toggleDeleteListConfirmation = {this.toggleDeleteListConfirmation}\r\n        />\r\n        <Navbar />\r\n        <LeftSidebar \r\n          toDoLists={this.state.toDoLists}\r\n          loadToDoListCallback={this.loadToDoList}\r\n          addNewListCallback={this.addNewList}\r\n          currentList={this.state.currentList}\r\n          swapToInput={this.swapToInput}\r\n          swapToDiv={this.swapToDiv}\r\n          clickedOn={this.state.clickedOn}\r\n          clickedId={this.state.clickedId}\r\n          handleListNameChange={this.handleListNameChange}\r\n        />\r\n        <Workspace \r\n          toDoListItems={items}\r\n          toggleDeleteListConfirmation = {this.toggleDeleteListConfirmation}\r\n          currentListActive={this.state.currentList.id != null}\r\n          swapToInput={this.swapToInput}\r\n          swapToDiv={this.swapToDiv}\r\n          swapToStatus={this.swapToStatus}\r\n          clickedOn={this.state.clickedOn}\r\n          clickedId={this.state.clickedId}\r\n          addNewItemToList={this.addNewItemTransaction}\r\n          moveItemUp={this.moveItemUpTransaction}\r\n          moveItemDown={this.moveItemDownTransaction}\r\n          deleteItem={this.deleteItemTransaction}\r\n          closeList={this.closeList}\r\n          undo={this.undo}\r\n          redo={this.redo}\r\n          hasUndo={this.state.hasUndo}\r\n          hasRedo={this.state.hasRedo}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}